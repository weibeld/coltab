#!/usr/bin/env perl

use strict;
use warnings;
use feature qw(say);
use File::Basename qw(dirname basename);
use Getopt::Std;
use Cwd qw(abs_path);

# Add directory containing our modules (../lib) to @INC so they can be imported
use lib dirname(dirname(abs_path(__FILE__))) . '/lib';
use Weibeld::Coltab::ParseManager qw(parse_file);
use Weibeld::Coltab::HTMLManager qw(html_init html_set_css html_add_header
                                    html_add_row html_end_table html_get);

our $VERSION = "0.01";
my $SCRIPT_NAME = basename($0);

# If set to true, exit script after processing --help or --version flags
$Getopt::Std::STANDARD_HELP_VERSION = 1;

# Command-line options
my %opts;
getopts('t:c:l', \%opts) or abort();
# These vars are true if and only if the corresponding options are specified
my $title = $opts{t};
my $css = $opts{c};
my $is_link_css = $opts{l};

# Command-line positional arguments
@ARGV == 1 or abort("Error: incorrect number of arguments");
my $markdown = $ARGV[0];

# Callback function references for the ParseManager
my %callbacks = (
    on_header_found => \&on_header_found,
    on_list_item_found => \&on_list_item_found,
    on_list_interrupted => \&on_list_interrupted
);

# Do actual work
html_init($title);
html_set_css($css, $is_link_css) if ($css);
parse_file($markdown, \%callbacks);
print html_get();


#------------------------------------------------------------------------------#
# Callbacks for ParseManager
#------------------------------------------------------------------------------#
sub on_list_item_found {
    my $color = _sanitize_color(shift);
    html_add_row($color);
}

sub on_header_found {
    my($content, $level) = @_;
    html_add_header($content, $level);
}

sub on_list_interrupted {
    html_end_table();
}

sub _sanitize_color {
    my $s = shift;
    $s =~ /^`?\#?([a-f0-9]{3}|[a-f0-9]{6})`?\s*$/i or die("Invalid color: $s");
    return "#$1";
}

#------------------------------------------------------------------------------#
# Misc subroutines
#------------------------------------------------------------------------------#

# Called by Getopt::Std when supplying --help option
sub HELP_MESSAGE {
    stdo(get_help_message());
}

# Called by Getopt::Std when supplying --version or --help option
sub VERSION_MESSAGE {
    stdo_ln("$SCRIPT_NAME version $VERSION");
}

# Abort script due to error (e.g. invalid command-line options)
sub abort {
    my $msg = shift;
    stde_ln($msg) if ($msg);
    stde(get_help_message());
    exit 1;
}

# Get help message
sub get_help_message {
    return <<"EOF"
Usage:
  $SCRIPT_NAME [options] <markdown-file>

Options:
  -t <title>  Title of HTML output file
  -c <file>   CSS file
  -l          Only link to CSS file (rather than including it)
  --help      Show this screen
  --version   Show version information
EOF
}

# Print argument to stdout or stderr, respectively
sub stdo { print STDOUT shift; }
sub stde { print STDERR shift; }
sub stdo_ln { say STDOUT shift; }
sub stde_ln { say STDERR shift; }

